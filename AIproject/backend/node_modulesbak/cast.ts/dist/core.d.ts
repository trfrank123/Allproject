export declare type ParseResult<T extends Parser<R>, R = unknown> = ReturnType<T['parse']>;
export declare type Parser<T> = {
    parse(input: unknown, context: ParserContext): T;
};
export declare type ParserContext = {
    typePrefix?: string;
    reasonSuffix?: string;
    overrideType?: string;
    name?: string;
};
export declare type InvalidInputErrorOptions = {
    name: string | undefined;
    typePrefix: string | undefined;
    reasonSuffix: string | undefined;
    expectedType: string;
    reason: string;
};
export declare class InvalidInputError extends TypeError {
    status: number;
    statusCode: number;
    constructor(options: InvalidInputErrorOptions);
}
export declare type StringOptions = {
    nonEmpty?: boolean;
    minLength?: number;
    maxLength?: number;
    match?: RegExp;
    trim?: boolean;
};
export declare function string(options?: StringOptions): {
    parse: (input: unknown, context?: ParserContext) => string;
    options: StringOptions;
};
export declare type UrlOptions = StringOptions & {
    domain?: string;
    protocol?: string;
    protocols?: string[];
};
export declare function url(options?: UrlOptions): {
    parse: (input: unknown, context?: ParserContext) => string;
    options: UrlOptions;
};
export declare type EmailOptions = StringOptions & {
    domain?: string;
};
export declare function email(options?: EmailOptions): {
    parse: (input: unknown, context?: ParserContext) => string;
    options: EmailOptions;
};
/** @description for parsing <input type="color"> in html form submission */
export declare function color(): {
    parse: (input: unknown, context?: ParserContext) => string;
};
export declare type NumberOptions = {
    min?: number;
    max?: number;
};
export declare function number(options?: NumberOptions): {
    parse: (input: unknown, context?: ParserContext) => number;
    options: NumberOptions;
};
export declare type FloatOptions = NumberOptions & {
    toFixed?: number;
    toPrecision?: number;
};
export declare function float(options?: FloatOptions): {
    parse: (input: unknown, context?: ParserContext) => number;
    options: FloatOptions;
};
export declare function int(options?: NumberOptions): {
    parse: (input: unknown, context?: ParserContext) => number;
    options: NumberOptions;
};
export declare type ObjectOptions<T extends object> = {
    [P in keyof T]: Parser<T[P]>;
};
export declare function object<T extends object>(options?: ObjectOptions<T>): {
    parse: (input: unknown, context?: ParserContext) => T;
    options: ObjectOptions<T>;
};
export declare function optional<T>(parser: Parser<T>): Parser<T | undefined>;
export declare function nullable<T>(parser: Parser<T>): {
    parse: (input: unknown, context?: ParserContext) => T | null;
    parser: Parser<T>;
};
export declare function boolean(expectedValue?: boolean): {
    parse: (input: unknown, context?: ParserContext) => boolean;
    expectedValue: boolean | undefined;
};
/** @description for parsing <input type="checkbox"> in html form submission */
export declare function checkbox(): {
    parse: (input: unknown, context?: ParserContext) => boolean;
    checkbox: boolean;
};
export declare type DateOptions = {
    min?: number | Date | string;
    max?: number | Date | string;
};
export declare function date(options?: DateOptions): {
    parse: (input: unknown, context?: ParserContext) => Date;
    options: DateOptions;
};
export declare function literal<T>(value: T): {
    parse: (input: unknown, context?: ParserContext) => T;
    value: T;
};
export declare function values<T>(values: T[]): {
    parse: (input: unknown, context?: ParserContext) => T;
    values: T[];
};
export declare type ArrayOptions = {
    minLength?: number;
    maxLength?: number;
    maybeSingle?: boolean;
};
export declare function array<T>(parser: Parser<T>, options?: ArrayOptions): {
    parse: (input: unknown, context?: ParserContext) => T[];
    parser: Parser<T>;
    options: ArrayOptions;
};
/**
 * @description for parsing database auto-increment primary key
 */
export declare function id(): {
    parse: (input: unknown, context?: ParserContext) => number;
};
